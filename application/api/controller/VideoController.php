<?php

namespace app\api\controller;

use app\admin\model\Focus;
use app\admin\model\Video;
use app\common\controller\Api;
use think\Request;

class VideoController extends Api
{
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }

    public function indexVideos()
    {
        $video = new Video();
        $res = $video->limit(4)->order('updatetime', 'desc')->select();

        $data = [];

        if (empty($res)) {
            return $this->own_result($data);
        }
        /** @var Video $v */
        foreach ($res as $v) {
            $data[] = $v->toArray();
        }

        return $this->own_result($data);
    }

    public function getVideos(Request $request)
    {
        $page = $request->get('page', 1);
        $pages_size = $request->get('page_size', 20);
        $type = $request->get('type', 0) + 1;

        /** @var Video $query */
        $query = new Video();
        $total = $query->count();

        $data = [];

        $offset = ($page - 1) * $pages_size;

        if ($offset + 1 > $total) {
            return $this->own_result($data);
        }

        $rows = $query->where('category', $type)->limit($offset, $pages_size)->order('updatetime', 'desc')->select();
        /** @var Video $v */
        foreach ($rows as $v) {
            $data[] = $v->toArray();
        }

        return $this->own_result($data);
    }

    function getVideoContent(Request $request)
    {
        $id = $request->get('video_id');
        $result = $this->validate(
            [
                'video_id' => $id,
            ],
            [
                'video_id' => 'require'
            ]
        );

        if (true !== $result) {
            return $this->own_error(40001, '缺少参数');
        }

        $video_content = Video::get($id);
        $video_content->setInc('view_num', rand(1, 10));
        $data = $video_content->toArray();


//        $res = Focus::where('user_id', $request->user->id)->where('video_id', $data['id'])->find();
        $data['is_collect'] = Focus::isCollect($request->user->id, $data['id']) ? true : false;
        $data['user'] = $video_content->team;
        return $this->own_result($data);
    }

    public function collect(Request $request)
    {
        $video_id = $request->post('video_id');

        $result = $this->validate(
            [
                'video_id' => $video_id,
            ],
            [
                'video_id' => 'require'
            ]
        );

        if (true !== $result) {
            return $this->own_error(40001, '确收参数');
        }

        Focus::isOrNoCollect($request->user->id, $video_id);
        return $this->own_result();
    }

    public function getCollect(Request $request)
    {

        $page = $request->get('page', 1);
        $pages_size = $request->get('page_size', 20);

        /** @var Video $query */
        $query = new Focus();
        $total = $query->where('user_id', $request->user->id)->count();

        $data = [];

        $offset = ($page - 1) * $pages_size;

        if ($offset + 1 > $total) {
            return $this->own_result($data);
        }
        $res = $query->where('user_id', $request->user->id)->limit($offset, $pages_size)->select();
        foreach ($res as $v) {
            $data[] = Video::get($v['video_id']);
        }
        return $this->own_result($data);
    }
}
